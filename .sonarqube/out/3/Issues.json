{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Compilador do Microsoft (R) Visual C#",
        "version": "4.0.0.0",
        "fileVersion": "4.0.0-4.21458.2 (2bfff7b9)",
        "semanticVersion": "4.0.0",
        "language": "pt-BR"
      },
      "results": [
        {
          "ruleId": "S1125",
          "level": "warning",
          "message": "Remove the unnecessary Boolean literal(s).",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Projects/eng-software-unisinos/Unisinos.EngSoftware.EShop/src/BuildingBlocks/SeedWork/BuildingBlocks.SeedWork/Entity.cs",
                "region": {
                  "startLine": 88,
                  "startColumn": 55,
                  "endLine": 88,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S3875",
          "level": "warning",
          "message": "Remove this overload of 'operator =='.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Projects/eng-software-unisinos/Unisinos.EngSoftware.EShop/src/BuildingBlocks/SeedWork/BuildingBlocks.SeedWork/Entity.cs",
                "region": {
                  "startLine": 85,
                  "startColumn": 37,
                  "endLine": 85,
                  "endColumn": 39
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S1210",
          "level": "warning",
          "message": "When implementing IComparable, you should also override <, >, <=, >=, ==, !=.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Projects/eng-software-unisinos/Unisinos.EngSoftware.EShop/src/BuildingBlocks/SeedWork/BuildingBlocks.SeedWork/Enumeration.cs",
                "region": {
                  "startLine": 8,
                  "startColumn": 27,
                  "endLine": 8,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S4201",
          "level": "warning",
          "message": "Remove this unnecessary null check; 'is' returns false for nulls.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Projects/eng-software-unisinos/Unisinos.EngSoftware.EShop/src/BuildingBlocks/SeedWork/BuildingBlocks.SeedWork/Entity.cs",
                "region": {
                  "startLine": 55,
                  "startColumn": 17,
                  "endLine": 55,
                  "endColumn": 28
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2328",
          "level": "warning",
          "message": "Refactor 'GetHashCode' to not reference mutable fields.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Projects/eng-software-unisinos/Unisinos.EngSoftware.EShop/src/BuildingBlocks/SeedWork/BuildingBlocks.SeedWork/Entity.cs",
                "region": {
                  "startLine": 72,
                  "startColumn": 29,
                  "endLine": 72,
                  "endColumn": 40
                }
              }
            }
          ],
          "relatedLocations": [
            {
              "physicalLocation": {
                "uri": "file:///C:/Projects/eng-software-unisinos/Unisinos.EngSoftware.EShop/src/BuildingBlocks/SeedWork/BuildingBlocks.SeedWork/Entity.cs",
                "region": {
                  "startLine": 76,
                  "startColumn": 22,
                  "endLine": 76,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "0": "Remove this use of '_requestedHashCode' or make it 'readonly'."
            }
          }
        },
        {
          "ruleId": "S3249",
          "level": "warning",
          "message": "Remove this 'base' call to 'object.GetHashCode', which is directly based on the object reference.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Projects/eng-software-unisinos/Unisinos.EngSoftware.EShop/src/BuildingBlocks/SeedWork/BuildingBlocks.SeedWork/Entity.cs",
                "region": {
                  "startLine": 82,
                  "startColumn": 24,
                  "endLine": 82,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S927",
          "level": "warning",
          "message": "Rename parameter 'other' to 'obj' to match the interface declaration.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Projects/eng-software-unisinos/Unisinos.EngSoftware.EShop/src/BuildingBlocks/SeedWork/BuildingBlocks.SeedWork/Enumeration.cs",
                "region": {
                  "startLine": 68,
                  "startColumn": 37,
                  "endLine": 68,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "S1125": {
          "id": "S1125",
          "shortDescription": "Boolean literals should not be redundant",
          "fullDescription": "Redundant Boolean literals should be removed from expressions to improve readability.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-1125",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope",
              "TestSourceScope"
            ]
          }
        },
        "S1210": {
          "id": "S1210",
          "shortDescription": "\"Equals\" and the comparison operators should be overridden when implementing \"IComparable\"",
          "fullDescription": "When you implement IComparable or IComparable<T> on a class you should also override Equals(object) and overload the comparison operators (==, !=, <, <=, >, >=). That’s because the CLR cannot automatically call your CompareTo implementation from Equals(object) or from the base comparison operator implementations. Additionally, it is best practice to override GetHashCode along with Equals.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-1210",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope"
            ]
          }
        },
        "S2328": {
          "id": "S2328",
          "shortDescription": "\"GetHashCode\" should not reference mutable fields",
          "fullDescription": "GetHashCode is used to file an object in a Dictionary or Hashtable. If GetHashCode uses non-readonly fields and those fields change after the object is stored, the object immediately becomes mis-filed in the Hashtable. Any subsequent test to see if the object is in the Hashtable will return a false negative.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2328",
          "properties": {
            "category": "Minor Bug",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope",
              "TestSourceScope"
            ]
          }
        },
        "S3249": {
          "id": "S3249",
          "shortDescription": "Classes directly extending \"object\" should not call \"base\" in \"GetHashCode\" or \"Equals\"",
          "fullDescription": "Making a base call in an overriding method is generally a good idea, but not in GetHashCode and Equals for classes that directly extend object because those methods are based on the object reference. Meaning that no two objects that use those base methods will ever be equal or have the same hash.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3249",
          "properties": {
            "category": "Major Bug",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope",
              "TestSourceScope"
            ]
          }
        },
        "S3875": {
          "id": "S3875",
          "shortDescription": "\"operator==\" should not be overloaded on reference types",
          "fullDescription": "The use of == to compare two objects is expected to do a reference comparison. That is, it is expected to return true if and only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by callers. On the other hand, overloading it to do exactly that is pointless; that’s what == does by default.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3875",
          "properties": {
            "category": "Blocker Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope",
              "TestSourceScope"
            ]
          }
        },
        "S4201": {
          "id": "S4201",
          "shortDescription": "Null checks should not be used with \"is\"",
          "fullDescription": "There’s no need to null test in conjunction with an is test. null is not an instance of anything, so a null check is redundant.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-4201",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope",
              "TestSourceScope"
            ]
          }
        },
        "S927": {
          "id": "S927",
          "shortDescription": "Parameter names should match base declaration and other partial definitions",
          "fullDescription": "The name of a parameter in an externally visible. This rule raises an issue when method override does not match the name of the parameter in the base declaration of the method, or the name of the parameter in the interface declaration of the method or the name of any other partial definition.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-927",
          "properties": {
            "category": "Critical Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "SonarWay",
              "MainSourceScope",
              "TestSourceScope"
            ]
          }
        }
      }
    }
  ]
}